from divoom import protocol
from divoom.protocol import Views, Command, Commands, Replies

def test_parse_reply():
    messages = [
                ([0x1, 0x6, 0x0, 0x4, 0x9, 0x55, 0x9, 0x70, 0x0, 0x2], (Replies.VOL, 9)),
                ([0x1, 0x6, 0x0, 0x4, 0xb, 0x55, 0x0, 0x6a, 0x0, 0x2], (Replies.MUTE, 0)),
                ([0x1, 0x8, 0x0, 0x4, 0x60, 0x55, 0x51, 0x8, 0x0, 0x1a, 0x3, 0x4, 0x2], (Replies.RADIO_FREQ, 88.1)),
                ([0x1, 0x8, 0x0, 0x4, 0x59, 0x55, 0x0, 0x14, 0x0, 0xce, 0x0, 0x2], (Replies.TEMP, 20)),
               ]
    for m in messages:
        reply, parsed = m
        assert parsed == protocol.parse_reply(reply)

def test_bytes_to_freq():
    assert protocol.bytes_to_freq([0x03, 0x0A]) == 100.3
    assert protocol.bytes_to_freq([0x4f, 0xa]) == 107.9 # 4f == 79
    assert protocol.bytes_to_freq([0x51, 0x8]) == 88.1 # 0x51 == 81

def test_freq_to_bytes():
    assert protocol.freq_to_bytes(100.3) == [0x03, 0x0A]
    assert protocol.freq_to_bytes(100.9) == [0x09, 0x0A]
    assert protocol.freq_to_bytes(107.3) == [73, 0x0A]
    assert protocol.freq_to_bytes(90.3) == [0x03, 0x09]
    assert protocol.freq_to_bytes(90.9) == [0x09, 0x09]
    assert protocol.freq_to_bytes(97.3) == [73, 0x09]

def test_freq_to_bytes_to_freq():
    assert protocol.bytes_to_freq(protocol.freq_to_bytes(100.3)) == 100.3
    assert protocol.bytes_to_freq(protocol.freq_to_bytes(90.3)) == 90.3
    assert protocol.bytes_to_freq(protocol.freq_to_bytes(88.3)) == 88.3

def test_bytes_to_freq_to_bytes():
    assert protocol.freq_to_bytes(protocol.bytes_to_freq([73, 0x09])) == [73, 0x09]

def test_valid_reply():
    assert protocol.valid_reply([0x1, None, None, 0x4, None, 0x55, None, None, None, 0x2])
    assert protocol.valid_reply([0x1, 0x6, 0x0, 0x4, 0x8, 0x55, 0x9, 0x70, 0x0, 0x2])
    assert protocol.valid_reply([None, 0x6, 0x0, 0x4, 0x8, 0x55, 0x9, 0x70, 0x0, 0x2]) ==  False
    assert protocol.valid_reply([0x1, 0x6, 0x0, 0x4, 0x8, 0x55, 0x9, 0x70, 0x0, None]) ==  False
    assert protocol.valid_reply([0x1, 0x6, 0x0, None, 0x8, 0x55, 0x9, 0x70, 0x0, 0x2]) ==  False
    assert protocol.valid_reply([0x1, 0x6, 0x0, 0x4, 0x8, None, 0x9, 0x70, 0x0, 0x2]) ==  False

def test_split_reply():
    replies = protocol.split_reply([0x1, 0x8, 0x0, 0x4, 0x59, 0x55, 0x3, 0x4, 0x4b, 0x0, 0x6, 0x3, 0x4, 0x2,
                           0x1, 0x6, 0x0, 0x4, 0x32, 0x55, 0xd2, 0x63, 0x3, 0x4, 0x2,
                           0x1, 0x8, 0x0, 0x4, 0x59, 0x55, 0x3, 0x4, 0x49, 0x0, 0x4, 0x3, 0x4, 0x2])

    assert len(replies) == 3
    for reply in replies:
        assert len(reply) >= 6
        assert reply[0] == protocol._PROTO.START_BYTE[0]
        assert reply[-1] == protocol._PROTO.END_BYTE[0]


    replies = protocol.split_reply([0x1, 0x6, 0x0, 0x4, 0x8, 0x55, 0x9, 0x70, 0x0, 0x2])
    assert len(replies) == 1

def test_mask():
    assert protocol.mask([0x04, 0x05]) == [0x04, 0x05]
    assert protocol.mask([0x01, 0x05]) == [0x03, 0x04, 0x05]
    assert protocol.mask([0x01, 0x02]) == [0x03, 0x04, 0x03, 0x05]

def test_unmask():
    assert protocol.unmask([0x04, 0x05]) == [0x04, 0x05]
    assert protocol.unmask([0x03, 0x04, 0x05]) == [0x01, 0x05]
    assert protocol.unmask([0x03, 0x04, 0x03, 0x05]) == [0x01, 0x02]

def test_mask_undoes_unmask():
    assert protocol.unmask(protocol.mask([0x04, 0x05])) == [0x04, 0x05]
    assert protocol.mask(protocol.unmask([0x03, 0x04, 0x05])) == [0x03, 0x04, 0x05]
    assert protocol.mask(protocol.unmask([0x03, 0x04, 0x03, 0x05])) == [0x03, 0x04, 0x03, 0x05]

def test_checksum():
    assert protocol.checksum([0x05, 0x00, 0x45, 0x00, 0x01]) == [0x4b, 0x00]

def test_command():
    c = Command(Commands.SWITCH_VIEW, Views.CLOCK_24)
    assert c.command == [0x01, 0x05, 0x00, 0x45, 0x00, 0x03, 0x04, 0x4B, 0x00, 0x02]
    c = Command(Commands.SWITCH_VIEW, Views.CLOCK_24, [0xff, 0x00, 0x00])
    assert c.command == [0x01, 0x08, 0x00, 0x45, 0x00, 0x03, 0x04, 0xff, 0x00, 0x00, 0x4D, 0x03, 0x04, 0x02]
